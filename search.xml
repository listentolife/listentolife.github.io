<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Canvas 射击小游戏详解系列(六)</title>
      <link href="/2018/09/07/Canvas-Game-VI/"/>
      <url>/2018/09/07/Canvas-Game-VI/</url>
      <content type="html"><![CDATA[<p>这篇将介绍页面动画跟项目设计实现。先会对动画做介绍，然后再总结项目中实现动画的设计。</p><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>这里说的页面动画指的是js动画，使用<code>requestAnimationFrame()</code>实现。</p><p>实现动画效果的原理是把动画拆成一帧帧的画面，当达到每秒至少24帧时，可以给人造成流畅的视觉变化效果。也就算在实现动画效果时，要经历更新画面，清除画面，绘制画面三个部分。</p><p>代码1 每个循环的代码逻辑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var animate = function () &#123;</span><br><span class="line">  /* </span><br><span class="line">   * 1.更新下一帧画面，比如移动</span><br><span class="line">   * 2.清除当前页面画面</span><br><span class="line">   * 3.绘制下一帧画面</span><br><span class="line">   */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第一步是更新下一帧的画面，处理完一些画面元素的数据调整跟状态调整；第二步是清除当前页面画布，腾出画布空间；第三步绘制下一帧画面，刷新画布内容。</p><p>完成三步循环之后，还需要通过<code>requestAnimationFrame()</code>进入下一个循环周期。</p><p>另外，既然有动画就需要用暂停或者结束的情况，需要做状态的判断。判断状态转变成暂停或者结束的条件一般有监听事件，碰撞检测，位置范围，超时等等。一般在第一步前判断是否需要更新，调用<code>requestAnimationFrame()</code>前判断是否需要进入下一个循环周期。</p><p>最终，一个完整的动画设计就明了了。</p><p>代码2 完整的动画代码逻辑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var animate = function () &#123;</span><br><span class="line">  /* </span><br><span class="line">   * 判断条件，选择暂停动画或继续动画</span><br><span class="line">   * 1.更新下一帧画面，比如移动</span><br><span class="line">   * 2.清除当前页面画面</span><br><span class="line">   * 3.绘制下一帧画面</span><br><span class="line">   * 判断条件，选择调用requestAnimationFrame(animate)或结束动画</span><br><span class="line">   */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="项目设计"><a href="#项目设计" class="headerlink" title="项目设计"></a>项目设计</h3><p>项目中的动画主要是在GAME对象中。当玩家点击开始游戏后，会执行<code>play()</code>方法。这个方法会先设置游戏状态，然后重置关卡数据，创建跟初始化画布所有的元素，然后再调用<code>animate()</code>方法。</p><h4 id="动画设计"><a href="#动画设计" class="headerlink" title="动画设计"></a>动画设计</h4><h5 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h5><p>进入<code>animate()</code>方法后，先做判断。先判断暂停状态变量是否为真，是则直接在画布上渲染暂停的图标。但是不是真的停下动画，只是让每一帧的渲染都是一样而已。直到暂停状态变量修改成假，就可以给移动量赋值。</p><p>在项目中，判断前还需要对键盘对象做一次检测，确认玩家是否有出现键盘事件，再根据不同的键盘事件修改。</p><h5 id="更新动画"><a href="#更新动画" class="headerlink" title="更新动画"></a>更新动画</h5><p>完成判断，继续动画时，根据前面得到的移动量，传入到飞机，怪兽类的实例对象中修改坐标位置。调用碰撞测试的方法<code>collision()</code>，判断碰撞是否发生。</p><h5 id="清除画布"><a href="#清除画布" class="headerlink" title="清除画布"></a>清除画布</h5><p>参考上一篇，直接使用<code>context.clearRect(0, 0, canvas.width, canvas.height)</code>。</p><h5 id="绘制画面"><a href="#绘制画面" class="headerlink" title="绘制画面"></a>绘制画面</h5><p>完成清除之后，调用<code>drawOject()</code>方法。这个方法内部会遍历所有画布的对象，调用对象的绘制方法。</p><h5 id="调用requestAnimationFrame-animate"><a href="#调用requestAnimationFrame-animate" class="headerlink" title="调用requestAnimationFrame(animate)"></a>调用<code>requestAnimationFrame(animate)</code></h5><p>这里需要再加一个判断。因为在前面的更新动画中，只是判断了是否暂停，这里判断是否结束动画。前面绘制之后，可能结束的条件是怪兽已经被消灭完或怪兽已经到达底部，其他情况下继续动画，需要调用<code>requestAnimationFrame(animate)</code>。</p><h4 id="碰撞设计"><a href="#碰撞设计" class="headerlink" title="碰撞设计"></a>碰撞设计</h4><p>碰撞设计主要是判断两个画布元素是否有重叠，其次是碰撞之后的状态跟动画效果的处理。这里主要讨论碰撞判断。</p><p>碰撞的判断到底为画布元素的边界是否有交叉。比如矩形的碰撞判断，为两个矩形的左边界与右边界，上边界与下边界的交叉判断。比如圆形，则是判断两个圆形圆心的距离是否小于两个圆形的半径之和。</p><p>如果是考虑矩形跟圆形，则需要判断矩形四个角跟圆形的位置关系及矩形中心到圆心的距离；</p><p>如果是考虑矩形缺角或圆形缺弧，则需要判断矩形各个角跟圆心及弧角的位置关系及矩形中心到圆心的距离。</p><p>如果是跟复杂的图形，则需要增加参考移动行为。比如项目中的怪兽跟子弹。不管怪兽的形状有多复杂，子弹的移动只有向上一个移动行为，所以主要的判断可以是子弹最上方的坐标是否进入怪兽边界内。</p><p>越复杂的碰撞判断，越要参考除了图形之外，其他的因素，比如移动行为，形状变化等等。</p><p>以上就是关于项目中动画部分的总结。</p><h3 id="系列结语"><a href="#系列结语" class="headerlink" title="系列结语"></a>系列结语</h3><p>整个项目其实整体的重点是动画的流程，怎么实现完整的动画每一帧的代码逻辑。然后拆分成两个问题，怎么渲染游戏元素，怎么设计游戏对象。</p><p>这个只是前端的一部分，还需要继续学习。加油！</p>]]></content>
      
      <categories>
          
          <category> HTML5 </category>
          
          <category> Canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
            <tag> HTML5 </tag>
            
            <tag> Animate </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Canvas 射击小游戏详解系列(五)</title>
      <link href="/2018/09/05/Canvas-Game-V/"/>
      <url>/2018/09/05/Canvas-Game-V/</url>
      <content type="html"><![CDATA[<p>这篇开始介绍Canvas的内容。Canvas是属于HTML5的内容。下面就来介绍一下Canvas。</p><h3 id="Canvas元素及画布"><a href="#Canvas元素及画布" class="headerlink" title="Canvas元素及画布"></a>Canvas元素及画布</h3><p>Canvas元素其实写法跟其他的HTML元素写法一样，比如下面的项目中的例子：</p><p>代码1 项目中Canvas元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;game&quot; data-status=&quot;start&quot;&gt;  </span><br><span class="line">    &lt;-- 其他代码 !-&gt;</span><br><span class="line">    &lt;canvas id=&quot;canvas&quot; width=&quot;700&quot; height=&quot;600&quot;&gt;</span><br><span class="line">        &lt;!-- 动画画板 --&gt;</span><br><span class="line">    &lt;/canvas&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;-- 其他代码 !-&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>代码1中，Canvas元素在页面上创建了一个宽700，长600的画布，这个就是Canvas实现图形的基础。</p><p>然后需要在JavaScript代码中写下这么两行代码：</p><p>代码2 获取Canvas对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var canvas = document.getElementById(&apos;canvas&apos;);</span><br><span class="line">var context = canvas.getContext(&apos;2d&apos;);</span><br></pre></td></tr></table></figure></p><p>这段代码先是获取了canvas元素，然后在调用canvas元素的getContext方法访问获取2d渲染上下文。得到的context才能进行绘画的操作。</p><p>下面是一些关于Canvas的绘制的介绍，因为是基础内容的介绍，所以就主要以代码形式说明。</p><h3 id="Canvas绘制"><a href="#Canvas绘制" class="headerlink" title="Canvas绘制"></a>Canvas绘制</h3><p>Canvas绘制分下面几种： 线跟圆弧，几何图形，文本，图片。</p><h4 id="绘制原理"><a href="#绘制原理" class="headerlink" title="绘制原理"></a>绘制原理</h4><p>Canvas绘制的原理是把画布坐标化，以左上角为原点，上边为x坐标正方向，左边为y坐标正方向。所有的绘制方法都是context下的方法。</p><h4 id="线跟圆弧"><a href="#线跟圆弧" class="headerlink" title="线跟圆弧"></a>线跟圆弧</h4><p>代码1 线跟圆弧的绘制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/* 线的绘制 */</span><br><span class="line">// 设置路径</span><br><span class="line">context.beginPath();</span><br><span class="line">// 设置路径起始点</span><br><span class="line">context.moveTo(320,470);</span><br><span class="line">// 设置路径终点</span><br><span class="line">context.lineTo(320,480);</span><br><span class="line">// 绘制路径</span><br><span class="line">context.stroke();</span><br><span class="line"></span><br><span class="line">/* 圆弧的绘制 */</span><br><span class="line">context.beginPath();</span><br><span class="line">// 圆弧的绘制使用context.arc()方法</span><br><span class="line">// context.arc(x, y, radius, startAngle, endAngle, anticlockwise)</span><br><span class="line">// x,y为圆心坐标</span><br><span class="line">// redius为圆的半径</span><br><span class="line">// startAngle，endAngle分别为开始角度跟结束角度（圆的水平右侧为0°）</span><br><span class="line">// anticlockwise为顺/逆时针设置，默认值为false顺时针</span><br><span class="line">context.arc(250, 250, 300, 0, Math.PI, false);</span><br><span class="line">// 绘制路径</span><br><span class="line">context.stroke();</span><br><span class="line">// 使用fill()方法将会把圆弧两端直接闭合填充</span><br><span class="line">// context.fill();</span><br></pre></td></tr></table></figure></p><h4 id="几何图形"><a href="#几何图形" class="headerlink" title="几何图形"></a>几何图形</h4><p>代码2 集合多边形跟圆形的绘制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/* 矩形的绘制 */</span><br><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(320, 470);</span><br><span class="line">context.lineTo(350, 470);</span><br><span class="line">context.lineTo(350, 500);</span><br><span class="line">context.lineTo(320, 500);</span><br><span class="line">// 设置闭合路径</span><br><span class="line">context.closePath();</span><br><span class="line">context.stroke();</span><br><span class="line">// 填充路径用fill()方法</span><br><span class="line">// context.fill();</span><br><span class="line">// 也可以直接使用矩形的绘制方法context.rect(x, y, width, height);</span><br><span class="line">// context.rect(320, 500, 30, 30);</span><br><span class="line"></span><br><span class="line">/* 圆形的绘制 */</span><br><span class="line">context.beginPath();</span><br><span class="line">//context.arc(250, 250, 300, 0, 2 * Math.PI, false);</span><br><span class="line">// 使用fill()方法将填充整个圆形</span><br><span class="line">// context.fill();</span><br></pre></td></tr></table></figure></p><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><p>代码3 文本的绘制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* 文本的绘制 */</span><br><span class="line">// 先设置字体样式</span><br><span class="line">context.font = &apos;25px arial&apos;;</span><br><span class="line">// context.strokeText()方法将文本描边绘制</span><br><span class="line">// 三个参数分别为被绘制的字符串，坐标(x,y)</span><br><span class="line">context.strokeText(&quot;描边文本&quot;, 100, 100);</span><br><span class="line">// context.fillText()方法将文本填充绘制</span><br><span class="line">context.strokeText(&quot;描边文本&quot;, 100, 100);</span><br></pre></td></tr></table></figure></p><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>代码4 图片的绘制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* 图片的绘制 */</span><br><span class="line">// 设置图片对象</span><br><span class="line">var image = new Image();</span><br><span class="line">// 设置图片地址</span><br><span class="line">image.src = &apos;plane.png&apos;;</span><br><span class="line">// 设置图片加载完成后的回调函数</span><br><span class="line">image.onload = function () &#123;</span><br><span class="line">    // 绘制图片context.drawImage(img, x, y, width, height)</span><br><span class="line">context.drawImage(image, 50, 50, 60, 100)</span><br><span class="line">// 裁剪图片也是用context.drawImage(image, source_x, source_y, source_width, source_height, x, y, width, heigh);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="样式设置"><a href="#样式设置" class="headerlink" title="样式设置"></a>样式设置</h4><p>代码5 绘制样式设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* 描边颜色设置 */</span><br><span class="line">context.fillStyle = #999;</span><br><span class="line"></span><br><span class="line">/* 填充颜色设置 */</span><br><span class="line">context.strokeStyle = #333;</span><br><span class="line"></span><br><span class="line">/* 线宽设置 */</span><br><span class="line">context.lineWidth = (Number);</span><br><span class="line"></span><br><span class="line">/* 设置字体样式 */</span><br><span class="line">context.font = &apos;25px arial&apos;;</span><br></pre></td></tr></table></figure></p><h4 id="Canvas擦除"><a href="#Canvas擦除" class="headerlink" title="Canvas擦除"></a>Canvas擦除</h4><p>代码6 绘制擦除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 擦除 */</span><br><span class="line">// 擦除可以使用context.clearRect(x, y, width, height)方法</span><br><span class="line">// 下面直接擦除整个画布</span><br><span class="line">context.clearRect(0, 0, canvas.width, canvas.height);</span><br></pre></td></tr></table></figure></p><p>下一篇将会介绍Canvas动画跟项目中的关于Canvas跟动画的设计。</p>]]></content>
      
      <categories>
          
          <category> HTML5 </category>
          
          <category> Canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Canvas 射击小游戏详解系列(四)</title>
      <link href="/2018/09/02/Canvas-Game-IV/"/>
      <url>/2018/09/02/Canvas-Game-IV/</url>
      <content type="html"><![CDATA[<p>写着写着内容有点多了，不过还是觉得这些东西记下来还是很有用的。下面开始介绍项目中对象的设计。</p><h3 id="项目中主要对象的设计"><a href="#项目中主要对象的设计" class="headerlink" title="项目中主要对象的设计"></a>项目中主要对象的设计</h3><p>整个项目中最重要的是游戏中的三个对象元素：飞机，怪兽，子弹。</p><h4 id="元素分析"><a href="#元素分析" class="headerlink" title="元素分析"></a>元素分析</h4><p>飞机支持在画布的底部进行左右的连续移动，移动时依赖玩家的操作，并仅支持左右键的操作。飞机还可以进行射击，玩家点击空格键，上键或Enter键会可以让飞机射击出子弹，并且支持连续射击。</p><p>上面总结的飞机行为可以得到，飞机有渲染，移动，临界判断跟射击的功能。需要的参数包括渲染时的画布对象，坐标，飞机图片，飞机尺寸，移动的速度，临界判断的画布上渲染的最大最小x坐标及射击的子弹长度跟移动速度参数。</p><p>怪兽只是在画布上部的一个区域进行从上到下蛇形自动移动。被子弹击中会有爆炸效果并消失。</p><p>上面总结的怪兽行为可以得到，怪兽有渲染，移动，临界判断的功能。需要的参数包括渲染时的画布对象，坐标，怪兽图片，爆炸图片，怪兽尺寸，移动的速度，临界判断的画布上渲染的最大最小x坐标。怪兽的下移移动不在对象中实现。</p><p>子弹通过飞机射击射出，保持一定速度向上移动，如果碰到怪兽会消失，如果一直到达画布顶部也会自动消失。</p><p>上面总结的子弹行为可以得到，子弹有渲染，移动，临界判断，清除的功能。需要的参数包括渲染时的画布对象，坐标，子弹长度，移动的速度。临界判断不在对象中设置方法。</p><h4 id="对象设计"><a href="#对象设计" class="headerlink" title="对象设计"></a>对象设计</h4><p>通过对三个元素的分析，飞机跟怪兽有可抽象成一致的属性(<code>options</code>属性及<code>context</code>画布)跟方法<code>drawing()</code>，<code>move()</code>，<code>translate()</code>。</p><p><code>options</code>传入的参数为JSON对象，包括了大量的参数，如果对象所渲染到画布上的图片，图片渲染的坐标点，图片尺寸，在画布上的可渲染的最大最小x坐标，移动速度等。Plane父类跟Enemy子类的<code>options</code>传入的参数会有差异，但是做了抽象统一。</p><p>两个元素的移动可以统一实现，所以我让怪兽的构造函数继承飞机的构造函数。</p><p>Enemy类虽然继承了Plane类，但是还是有一些差异点。Plane类中还有一个创建子弹的<code>shoot()</code>方法，这个方法也有被Enemy类继承，但是当前项目中Enemy类的实例并没有使用这个类，是存在代码冗余的问题。但是也支持了项目进一步优化，Enemy类的实例可以进一步提高难度，增加项目的趣味。</p><p>Enemy类的方法<code>drawing()</code>做了重写，因为怪兽有一个爆炸的渲染判断，涉及判断是否存活(属性<code>isLive</code>)。</p><p>子弹的行为跟前两者不同，虽然也是一样的属性，但是方法基本需要重写，所以不做继承。</p><h3 id="键盘对象设计"><a href="#键盘对象设计" class="headerlink" title="键盘对象设计"></a>键盘对象设计</h3><p>因为飞机的移动跟射击都是支持连续，如果只是在Game对象中实现键盘事件监听，实际的移动跟射击都会有卡顿感，所以把键盘事件转换成点击状态，效果上会更加顺畅。</p><p>键盘对象包括了左右上键，空格键，Enter键的状态，并把<code>document.onkeydown</code>跟<code>document.onkeyup</code>都指向了自身的方法，在放在中判断键盘按键是否按下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @constructor KeyBoard</span><br><span class="line"> * @description 键盘监听对象</span><br><span class="line"> * @see The &lt;a href=&quot;#&quot;&gt;KeyBoard&lt;/a &gt;.</span><br><span class="line"> * @example </span><br><span class="line"> * this.keyBoard = new KeyBoard();</span><br><span class="line"> */</span><br><span class="line">function KeyBoard () &#123;</span><br><span class="line">  document.onkeydown = this.keydown.bind(this);</span><br><span class="line">  document.onkeyup = this.keyup.bind(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">KeyBoard.prototype = &#123;</span><br><span class="line">  pressedLeft: false, // 是否点击左键</span><br><span class="line">  pressedRight: false, // 是否点击右键</span><br><span class="line">  pressedUp: false, // 是否按了上报</span><br><span class="line">  pressedSpace: false, // 是否按了上报</span><br><span class="line">  pressedEnter: false, // 是否按了上报</span><br><span class="line">  keydown: function (event) &#123;</span><br><span class="line">    // 判断哪个按键按下，修改按键状态</span><br><span class="line">  &#125;,</span><br><span class="line">  keyup: function (event) &#123;</span><br><span class="line">    // 判断哪个按键松开，修改按键状态</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>除了这几个对象的设计，因为还涉及对象的继承，所以还另外齐起了一个文件common.js放处理继承父类原型对象的函数<code>inheritPrototype()</code>。具体的介绍可以会看上一篇关于继承的介绍。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @description 继承父类原型对象的函数</span><br><span class="line"> * @param &#123;Object&#125; subType 子类对象</span><br><span class="line"> * @param &#123;Object&#125; subType 父类对象</span><br><span class="line"> */</span><br><span class="line">var inheritPrototype = function (subType, superType) &#123;</span><br><span class="line">  // 把父类对象的原型对象赋值给proto</span><br><span class="line">  var protoType = Object.create(superType.prototype);</span><br><span class="line">  // proto的constructor指向子类对象，进行重置</span><br><span class="line">  protoType.constructor = subType;</span><br><span class="line">  // 把子类的原型指向原型</span><br><span class="line">  subType.prototype = protoType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于对象中设计到的Canvas的部分，下一篇将介绍。</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 对象设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> js面向对象 </tag>
            
            <tag> 对象设计 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Canvas 射击小游戏详解系列(三)</title>
      <link href="/2018/09/02/Canvas-Game-III/"/>
      <url>/2018/09/02/Canvas-Game-III/</url>
      <content type="html"><![CDATA[<p>上一篇讲了一下创建对象的三种模式，本篇就来讲一下继承。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>这里说的继承是指构造函数的继承。一般继承是在设计中把一些不同类型的对象的共同点抽象出来，或者是在原有的构造函数中继承出新的构造函数，减少代码冗余。</p><p>继承可以使子类拥有父类的属性跟方法，而且不会出现重复的代码。</p><p>最简单的方式就是在子类的构造函数中创建一个父类的实例对象，再把子类自有的属性跟对象添加到这个实例对象上，在返回出来。</p><p>代码1 项目中怪兽子类继承飞机父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function Plane (option, context) &#123;</span><br><span class="line">  this.opts = option;</span><br><span class="line">  this.context = context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Plane.prototype.drawing = function () &#123;</span><br><span class="line">  // 画布上渲染图片</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Plane.prototype.move = function () &#123;</span><br><span class="line">  // 飞机每帧移动</span><br><span class="line">&#125;</span><br><span class="line">// 其他方法省略</span><br><span class="line"></span><br><span class="line">function Enemy (option, context) &#123;</span><br><span class="line">  this.prototype = new Plane(option, context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Enemy.prototype.drawing = function () &#123;</span><br><span class="line">  // 重写方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种方案虽然能实现子类对父类的继承，但是出现了以下的几个问题：子类的实例对象的constructor指向了父类的构造函数，原因是子类构造函数中先创建了一个父类的实例对象，这个对象的constructor肯定指向父类的构造函数。<br>因此，在上面的代码基础上，还需要把constructor指向自身，可以解决这个问题了。</p><p>代码2 项目中怪兽子类继承的优化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Enemy (option, context) &#123;</span><br><span class="line">  this.prototype = new Plane(option, context);</span><br><span class="line">  this.protptype.constructor = Enemy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Enemy.prototype.drawing = function () &#123;</span><br><span class="line">  // 重写方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是，这里可以看到，有些方法可能会需要重写，这个问题不大，但是会有属性覆盖父类属性的问题，所以这点也是需要优化的，减少创建出来的对象的冗余。</p><p>这里要补充一个，还可以直接通过<code>call()</code>绑定父类构造函数进行继承，但是写在原型上的方法都没法用。但是也是我们参考的一个点</p><p>代码3 项目中怪兽子类绑定飞机父类构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function Enemy (option, context) &#123;</span><br><span class="line">  Plane.call(this, option, context);</span><br><span class="line">  // 其他省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上的问题点其实都是在如何可以准确的继承父类的方法，减少属性覆盖，又保证子类constructor指向子类的构造函数。这里我用到了这个项目前学习到的继承方案，包括以下的函数</p><p>代码4 <code>inheritPrototype()</code>方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @description 继承父类原型对象的函数</span><br><span class="line"> * @param &#123;Object&#125; subType 子类对象</span><br><span class="line"> * @param &#123;Object&#125; subType 父类对象</span><br><span class="line"> */</span><br><span class="line">var inheritPrototype = function (subType, superType) &#123;</span><br><span class="line">  // 把父类对象的原型对象赋值给proto</span><br><span class="line">  var protoType = Object.create(superType.prototype);</span><br><span class="line">  // proto的constructor指向子类对象，进行重置</span><br><span class="line">  protoType.constructor = subType;</span><br><span class="line">  // 把子类的原型指向原型</span><br><span class="line">  subType.prototype = protoType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个方案利用了构造函数继承跟上面的<code>inheritPrototype()</code>方法。前者继承了父类的属性，后者函数继承了父类原型中的所有方法。最终的效果如下：</p><p>代码5 项目中的继承设计<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function Plane (option,context) &#123;</span><br><span class="line">  this.opts = option;</span><br><span class="line">  this.context = context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Plane.prototype.drawing = function () &#123;</span><br><span class="line">  // 画布上渲染图片</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Enemy(options,context) &#123;</span><br><span class="line">  // 继承父类Plane的属性</span><br><span class="line">  Plane.call(this, options, context);</span><br><span class="line">&#125;</span><br><span class="line">// 继承父类Plane的原型</span><br><span class="line">inheritPrototype(Enemy, Plane);</span><br><span class="line"></span><br><span class="line">Enemy.prototype.drawing = function () &#123;</span><br><span class="line">  // 重写方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下一篇介绍项目中对象的设计。</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 对象设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> js面向对象 </tag>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Canvas 射击小游戏详解系列(二)</title>
      <link href="/2018/09/02/Canvas-Game-II/"/>
      <url>/2018/09/02/Canvas-Game-II/</url>
      <content type="html"><![CDATA[<p>接下来会介绍关于游戏项目中关于对象的设计，但在这之前想先对JavaScript对象做一些总结，然后再介绍项目的对象设计。这里会分三篇介绍。</p><h3 id="JavaScript创建对象的三种模式"><a href="#JavaScript创建对象的三种模式" class="headerlink" title="JavaScript创建对象的三种模式"></a>JavaScript创建对象的三种模式</h3><p>js创建对象的三种模式有工厂模式，构造函数模式及原型模式。</p><p>其实正常来说，创建一个对象是可以直接声明一个Object类型，但是如果需要创建多个对象的时候，这个方法显然不利于开发。而且很多时候需要创建的对象都有一些相似点，比如同一类型，同样的属性跟方法。如果能有一种方式可以用相同的代码处理创建对象的话，就可以提高代码的性能了。上面提及的三种模式就是解决方案。</p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂模式就是通过传参给一个函数方法，在函数中进行对象的创建，赋值，然后返回。</p><p>代码1 项目中飞机对象根据工厂模式的实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function createPlane (option, context) &#123;</span><br><span class="line">  var plane = new Object();</span><br><span class="line">  plane.opts = option;</span><br><span class="line">  plane.context = context;</span><br><span class="line">  plane.drawing = function () &#123;</span><br><span class="line">    // 画布上渲染图片</span><br><span class="line">  &#125;</span><br><span class="line">  plane.move = function () &#123;</span><br><span class="line">    // 飞机每帧移动</span><br><span class="line">  &#125;</span><br><span class="line">  // 其他方法省略</span><br><span class="line">  return plane;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var plane1 = createPlane(opts, context);</span><br></pre></td></tr></table></figure></p><p>这种方式创建对象比较简单，只需要知道创建对象的函数跟传入需要的参数即可。其不足在于两点：工厂模式是通过函数方法来创建对象，而不是通过new方法来创建，这样的创建方式不够直观，还是会有一些冗余的代码；工厂模式所返回的对象，在后面的程序中，无法识别对象类型，只能识别是Object类型。</p><p>所以就有了构造函数模式。</p><h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><p>这种模式是先声明一个构造函数，然后通过new来创建对象。</p><p>代码2  项目中飞机对象根据工厂模式的实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function Plane (option, context) &#123;</span><br><span class="line">  this.opts = option;</span><br><span class="line">  this.context = context;</span><br><span class="line">  this.drawing = function () &#123;</span><br><span class="line">    // 画布上渲染图片</span><br><span class="line">  &#125;</span><br><span class="line">  this.move = function () &#123;</span><br><span class="line">    // 飞机每帧移动</span><br><span class="line">  &#125;</span><br><span class="line">  // 其他方法省略</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var plane2 = new Plane(opts, context);</span><br></pre></td></tr></table></figure></p><p>代码2跟代码1的对比中可以发现，工厂模式是在函数内部通过new一个对象再返回，但是构造函数模式中，new是在构造函数外面，而且函数内部是通过this来进行赋值的。</p><p>在构造函数模式中，程序是先执行了new关键词，即创建了一个对象。然后把构造函数的作用域赋值给了这个对象，也就是构造函数的this指针指向这个对象。然后执行函数，这期间会把属性跟方法全部赋值给这个对象。最后再把对象返回出来。</p><p>构造函数的优点也比较明显，它避免了工厂模式的两个不足。通过构造函数创建的对象，其实就是这个构造函数的一个实例。我们就可以通过<code>instanceof</code>方法判断一个对象的构造函数。</p><p>代码3 instanceof判断对象是否是某个构造函数的实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(plane2 instanceof Plane); // true</span><br></pre></td></tr></table></figure></p><p>不过，构造函数模式也有它的一些不足。构造函数所创建出来的每个实例对象都会包含一些属性跟方法，而方法其实在所有实例对象中的功能都是一样的。而这些方法实际上也是Function的实例对象，这样就出现了不必要的冗余，这些方法应该实现复用。</p><p>下面的原型模式就能解决这个不足。</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>原型模式就是利用到JavaScript中对象的原型prototype来实现的。</p><p>每个构造函数上都会有一个属性prototype。prototype就是原型，也是一个对象，而且这个对象prototype是所有通过同一构造函数创建(new)的实例对象所共享的(实际上在浏览器console窗口打印每个实例对象，显示的是属性<code>__proto__</code>指向prototype，实际开发中只要用prototype就好)。prototype下的constructor指向实例对象的构造函数。</p><p>代码4 判断实例的prototype<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.prototype.isPrototypeOf(object1) // 判断object1挂载的prototype是不是Object的</span><br></pre></td></tr></table></figure></p><p>原型模式根据JavaScript的原型原理，在构造函数的基础上，把方法放到了prototype对象下。创建对象的方法跟构造函数模式一样，内部创建对象的流程也差不多，也是先执行new关键词，创建一个对象，然后把函数的this指向这个对象，在执行属性赋值跟方法声明时，把方法都放在this.prototype原型对象中。</p><p>代码5 项目中飞机对象根据工厂模式的实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function Plane (option, context) &#123;</span><br><span class="line">  this.opts = option;</span><br><span class="line">  this.context = context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Plane.prototype.drawing = function () &#123;</span><br><span class="line">  // 画布上渲染图片</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Plane.prototype.move = function () &#123;</span><br><span class="line">  // 飞机每帧移动</span><br><span class="line">&#125;</span><br><span class="line">// 其他方法省略</span><br><span class="line"></span><br><span class="line">var plane3 = new Plane(opts, context);</span><br></pre></td></tr></table></figure></p><p>这样的创建对象模式，可以使构造函数创建的实例对象，共享原型中的方法。但是也会有问题存在，这个问题是共享本身的问题。当所有的实例对象共享原型时，就可能出现数据污染的情况。</p><p>数据污染的原因在于JavaScript的数据存储方式。JavaScript的数据分为值类型跟引用类型，值类型就是一个变量储存一个值，而引用类型就是一个变量指向内存的一个地址，这个地址储存一个值。值类型变量的赋值是深赋值，赋值完成后两个变量的操作互不影响，但是引用类型的变量之间的赋值其实是复制了指针，这就导致一个变量对指针指向的值进行修改时，另一个变量的值也会跟着改变，就会出现数据污染。</p><p>所以，在使用原型模式时，一般把函数方法放在原型prototype中。</p><p>下一篇介绍继承。</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 对象设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> js面向对象 </tag>
            
            <tag> 工厂模式 </tag>
            
            <tag> 构造函数模式 </tag>
            
            <tag> 原型模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Canvas 射击小游戏详解系列(一)</title>
      <link href="/2018/08/16/Canvas-Game-I/"/>
      <url>/2018/08/16/Canvas-Game-I/</url>
      <content type="html"><![CDATA[<p>前面根据腾讯的一个项目，自己做了一个Canvas设计小游戏，这个小游戏为玩家操作小飞机射击怪兽。小飞机可以左右移动，然后可以射出子弹。怪兽有若干个，从屏幕上方左右移动，当移动到侧边界会下移一行。如果怪兽存活并移动到与飞机一行，则游戏失败，如果飞机能在此之前射击到所有怪兽，则游戏通关。游戏总共设计6关，每一关难度不一样。</p><p>整个项目最初只有一个html文件，一个配置文件及一个app入口文件，入口文件的框架已经建好，主要的功能逻辑代码及对象文件都是自己设计实现的。整个项目的关键点是JavaScript中的面向对象设计跟Canvas。页面的渲染都是通过Canvas进行渲染，然后把整个游戏设计成一个对象，里面的角色及零件也都是设计成一个个的对象。下面就给整个项目做一个详细的分析。</p><h2 id="项目整体分析"><a href="#项目整体分析" class="headerlink" title="项目整体分析"></a>项目整体分析</h2><p>虽然项目的框架并不是自己设计的，但是毕竟整个设计还是非常好的，值得我们去分析，所以我就先把整个游戏的框架跟自己的设计做一下分析。</p><p>游戏页面分为四个部分，根据游戏的状态进行切换展示：游戏首页，游戏成功页面，游戏失败页面及游戏通关页面，通过状态start, failed, success及all-success来控制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data-status=&quot;start&quot;] .game-intro &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding-top: 180px;</span><br><span class="line">  background: url(./img/bg.png) no-repeat 430px 180px;</span><br><span class="line">  background-size: 200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[data-status=&quot;failed&quot;] .game-failed, </span><br><span class="line">[data-status=&quot;success&quot;] .game-success,</span><br><span class="line">[data-status=&quot;all-success&quot;] .game-all-success &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding-top: 180px;</span><br><span class="line">  background: url(./img/bg-end.png) no-repeat 380px 190px;</span><br><span class="line">  background-size: 250px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此，整个游戏就设计成一个名为GAME的对象进行管理。当页面渲染完之后，GAME对象就会进行初始化，设定最初的状态为start，即展示游戏首页，并初始化四个部分的按钮，设置监听事件。</p><p>这就是项目原有的框架部分。后面为我根据框架跟游戏设计实现的部分。</p><p>不同的按钮会根据游戏状态设置不同的触发内容，不过因为游戏最初，游戏失败后及游戏通关后重玩的触发内容都是从一个新的游戏开始玩起，所以内容都是初始化游戏数据<code>dataInit()</code>及开始游戏<code>play()</code>，只有游戏通关后继续不需要初始化游戏数据即可进入游戏。</p><p>初始化游戏数据<code>dataInit()</code>主要是实现一些游戏的配置数据，比如游戏关卡数，游戏分数及怪兽和飞机的配置数据等。</p><p>开始游戏<code>play()</code>操作比较多，所以把步骤都拆分成独立的函数方法：<code>setState()</code>用于设置游戏状态，<code>dataReset()</code>用于重置游戏关卡数据，包括难度，位置及键盘监听，<code>createObject()</code>用于创建初始化画布上的对象，比如小飞机，怪兽等，最后的<code>animate()</code>则设置动画效果，涉及渲染画布上所有对象每一帧的变化及位移，并判断游戏的状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">play: function () &#123;</span><br><span class="line">    this.setStatus(&apos;playing&apos;);</span><br><span class="line">    // 重置每一关数据</span><br><span class="line">    this.dataReset();</span><br><span class="line">    // 创建画布上飞机，怪兽军团及分数的初始化对象</span><br><span class="line">    this.createObject();</span><br><span class="line">    // 开始动画</span><br><span class="line">    this.animate();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里就大致的说明了一下这个小游戏项目框架的设计。下一篇会分析项目中对象的设计。</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 对象设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> js面向对象 </tag>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《高性能JavaScript》读书笔记(四)</title>
      <link href="/2018/06/26/High-Performance-JavaScript-Reading-Note-IV/"/>
      <url>/2018/06/26/High-Performance-JavaScript-Reading-Note-IV/</url>
      <content type="html"><![CDATA[<p>《高性能JavaScript》第四章主要涉及算法跟流程控制，包括循环，条件语句和递归的优化。下面就开始吧。</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="四种循环类型"><a href="#四种循环类型" class="headerlink" title="四种循环类型"></a>四种循环类型</h4><p>四种循环类型包括 for循环，while循环，do-while循环及for-in循环。</p><p>这四种循环类型都有各自的特点，适用于不同的实现需求。比如while循环是前侧循环，适合需要在进入循环前开始判断的操作，而do-while循环则适合最少需要循环一次才开始判断的操作。for循环比较直观，当然也并不是最简单的，而for-in是针对对象的，可以枚举任何对象的属性名，但是是性能最差的。</p><h4 id="循环优化"><a href="#循环优化" class="headerlink" title="循环优化"></a>循环优化</h4><p>循环的优化上，给出了这几点建议：</p><h5 id="尽量不使用for-in循环"><a href="#尽量不使用for-in循环" class="headerlink" title="尽量不使用for-in循环"></a>尽量不使用for-in循环</h5><p>for-in循环的性能最差，因为其主要针对对象，虽然表面上很简单，但是在循环的时候却因每次迭代操作都会同时搜索实例或原型属性，所以会产品更多的开销，所以是最慢的。针对对象的遍历，书中提出一种方案：如果知道对象的所有属性，则可以用一个数组存储所有的属性名，然后遍历数组会更快：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var props = [&quot;prop1&quot;, &quot;prop2&quot;],</span><br><span class="line">i = 0;</span><br><span class="line"></span><br><span class="line">while (i &lt; props.length) &#123;</span><br><span class="line">process(object[props[i++]]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="减少迭代的工作量"><a href="#减少迭代的工作量" class="headerlink" title="减少迭代的工作量"></a>减少迭代的工作量</h5><p>一般的数组循环，其循环体中都会有以下的操作：</p><ol><li>在控制条件中查找一次属性 (<code>item.length</code>)；</li><li>在控制条件中执行一次数值比较 (<code>i &lt; items.length</code>)；</li><li>一次比较操作查看控制条件的计算结果是否为true (<code>i &lt; item.length == true</code>)；</li><li>一次自增操作 (<code>i++</code>)；</li><li>一次数组查找 (<code>items[i]</code>)；</li><li>一次函数调用 (<code>process(items[i])</code>)。</li></ol><p>一个本来迭代次数有限的循环，是没办法考虑从迭代上做优化的，所以可以从每一次都会执行的循环体中着手优化，每优化一个操作，就可以得到客观的性能提升。书中给出的两条优化建议是：</p><ol><li>把查找属性的操作在初始化时就复制到一个局部变量中，即可减少第一个操作；</li><li>如果，循环数组的顺序跟结果无关，则可以考虑倒序处理。因为倒序的时候，只需要判断控制条件是否为true(除非控制条件为0，则都是true)，不需要再做一次比较。</li></ol><h5 id="减少迭代次数"><a href="#减少迭代次数" class="headerlink" title="减少迭代次数"></a>减少迭代次数</h5><p>如果遇到一个迭代次数非常多，则可以考虑下如何减少迭代次数上下手。书中介绍一种限制迭代次数的模式，“达夫设备(Duff’s Device)”。这种模式可以在一次迭代中执行多次迭代的操作。下面是例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var iterations = Math.floor(items.length / 8),</span><br><span class="line">startAt = items.length % 8,</span><br><span class="line">i = 0;</span><br><span class="line"></span><br><span class="line">do &#123;</span><br><span class="line">switch(startAt)&#123;</span><br><span class="line">case 0: process(items[i++]);</span><br><span class="line">case 7: process(items[i++]);</span><br><span class="line">case 6: process(items[i++]);</span><br><span class="line">case 5: process(items[i++]);</span><br><span class="line">case 4: process(items[i++]);</span><br><span class="line">case 3: process(items[i++]);</span><br><span class="line">case 2: process(items[i++]);</span><br><span class="line">case 1: process(items[i++]);</span><br><span class="line">&#125;</span><br><span class="line">startAt = 0;</span><br><span class="line">&#125; while (--iterations);</span><br></pre></td></tr></table></figure><p>假设原来的迭代次数为n(8(x) &lt; n &lt;= 8(n+1))，则这种模式可以把迭代次数减少至(n+1)次。书中还提供了用while代替switch的方案，还可以在优化迭代的速度。</p><h5 id="基于函数的迭代"><a href="#基于函数的迭代" class="headerlink" title="基于函数的迭代"></a>基于函数的迭代</h5><p>基于函数的迭代方法foreach()在使用上是非常方便的，但是因为每个循环中都必须调用一个外部方法，所以性能上还是比基于循环的迭代要慢一些。</p><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><h4 id="两种条件语句的选择"><a href="#两种条件语句的选择" class="headerlink" title="两种条件语句的选择"></a>两种条件语句的选择</h4><p>条件语句分if-else跟switch。当判断条件跟分支操作较少时，if-else语句更易读，而当判断条件跟分支操作较多时，switch语句则更易读。当判断条件跟分支操作较少时，if-else跟switch性能上没有什么区别，只有判断更加复杂的情况下才会让switch的性能突出。</p><h4 id="if-else优化"><a href="#if-else优化" class="headerlink" title="if-else优化"></a>if-else优化</h4><p>如果中需要做大量的顺序或大小的判断，不管是if-else或者switch语句，最多都是要遍历完所有条件。书中提出可以考虑二分法的优化思路，根据判断条件的顺序或大小，优先跟居中的判断值做比较，从而把最大的判断次数减半。实现的例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">if (value &lt; 6) &#123;</span><br><span class="line">if (value &lt; 3) &#123;</span><br><span class="line">if (value == 0) &#123;</span><br><span class="line">return result0;</span><br><span class="line">&#125; else if (value == 1) &#123;</span><br><span class="line">return result1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return result2;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">if (value == 3) &#123;</span><br><span class="line">return result3;</span><br><span class="line">&#125; else if (value == 4) &#123;</span><br><span class="line">return result4;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return result5;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">if (value &lt; 8) &#123;</span><br><span class="line">if (value == 6) &#123;</span><br><span class="line">return result6;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return result7;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">if (value == 8) &#123;</span><br><span class="line">return result8;</span><br><span class="line">&#125; else if (value == 9) &#123;</span><br><span class="line">return result9;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return result10;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找表"><a href="#查找表" class="headerlink" title="查找表"></a>查找表</h4><p>如果是判断大量的离散值，判断的结果只需要一个值而不是一系列的操作，那还可以通过构建查找表进行优化。查找表的优势在于它是通过键值对直接找到处理值，不需要通过判断语句，即使离散值增加，也不会产生更多的性能开销。</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归可以把复杂的算法变得很简单，可以把很复杂的执行过程大大的简化。但是递归也有一些问题点。比如当执行的计算较长时，会使整个系统进入假死状态，而且会有浏览器调用栈的限制。而这些问题，都可能是在设计的初期并没有意识到的。</p><p>一般递归有两种模式，一种的直接递归，函数调用函数自身，如比较经典的阶乘函数。另一种是“隐伏模式”，是两个函数互相调用，这种模式在出错调试时会非常棘手。</p><p>一般递归函数出现调用栈溢出的原因在于不正确的终止条件，如果终止条件没有问题，则需要考虑为了浏览器安全。书中给出了两种方案：迭代跟Memoization。</p><p>迭代虽然在速度上快不过递归，但是由于它相对对浏览器友好，所以一旦程序遇到调用栈溢出的问题，就需要考虑迭代的实现方案。</p><p>Memoization是一种缓存阶段计算的方案。在方案中，会有一个数组专门存储阶段性的计算值，这些计算值本身可能在不被存储的时候回因程序需要而不断的被计算获得。当存在一个数组能存储下这些阶段性的计算值时，函数被调用的越多，其重复的计算工作会得到控制，整个函数的性能会逐渐稳定。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>这章内容主要是在程序流程上的优化，减少代码的执行量跟解决代码的风险问题。现在比较多的项目都会需要考虑大规模的并发跟流量，所以程序上的小小优化，风险上的细心处理，都能对项目有很大的帮助。值得学习。</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 高性能JavaScript </tag>
            
            <tag> 读书笔记 </tag>
            
            <tag> 程序优化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《高性能JavaScript》读书笔记(三)</title>
      <link href="/2018/06/25/High-Performance-JavaScript-Reading-Note-III/"/>
      <url>/2018/06/25/High-Performance-JavaScript-Reading-Note-III/</url>
      <content type="html"><![CDATA[<p>《高性能JavaScript》第三章主要讲的是DOM操作的优化。上两篇的读书笔记自己读过之后感觉更像是对内容的自我消化后的按原文复述，所以这篇调整一下内容的结构，只讲关键点。</p><h3 id="DOM操作的优化问题"><a href="#DOM操作的优化问题" class="headerlink" title="DOM操作的优化问题"></a>DOM操作的优化问题</h3><p>DOM操作涉及以下三类问题：</p><ol><li>访问和修改DOM元素</li><li>修改DOM元素的样式所导致的重绘(repaint)跟重排(reflow)</li><li>通过DOM事件处理与用户的交互</li></ol><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>DOM，文档对象模型，是独立于语言，用于操作XML跟HTML文档的程序接口。DOM是有规范的，但是实现是由各个浏览器方独自实现支持，因此，我们在开发页面时，需要对不同的浏览器做不同的兼容处理（比如IE，不过现在IE已经很少了）。</p><p>DOM是程序接口，我们在开发的时候，会根据需求去实现页面与用户的互动。但因为DOM是独立的，每次需要获取节点都需要各种调用，因此这些调用的增多会影响页面的性能。</p><h4 id="DOM访问与修改"><a href="#DOM访问与修改" class="headerlink" title="DOM访问与修改"></a>DOM访问与修改</h4><p>其实DOM的访问跟修改可以联系上一章提及的嵌套对象的内容。DOM中的每个节点都是一个对象，如果节点下存在子节点，则这个节点就是一个嵌套对象的例子。其一是DOM是程序接口，相对独立，调用接口都是存在一定的响应时间；其二是DOM中存在大量的嵌套对象，在搜索查询上也是需要一定的处理时间。因此，DOM的访问与修改会存在以下优化点：</p><ol><li>DOM的重复调用</li><li>DOM集合元素的重复查询</li><li>准确的获得DOM元素集合</li></ol><h4 id="DOM的重复调用"><a href="#DOM的重复调用" class="headerlink" title="DOM的重复调用"></a>DOM的重复调用</h4><p>简单的说，开发中经常会把后端穿来的数据修改渲染到页面上，书中提到最坏的情况是循环访问或修改元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function innerHTMLLoop () &#123;</span><br><span class="line">for (var count = 0; count &lt; 15000; count++) &#123;</span><br><span class="line">document.getElementById(&apos;here&apos;).innerHTML += &apos;a&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码的问题在于每次循环中都会读取一次跟重写一次<code>innerHTML</code>，而且循环次数越多，读取跟重写都会不断增加。</p><p>所以，优化的方案是，先把需要添加的节点保存在局部变量中，然后在一次性读取跟重写页面结构。<br>如果出现大量的重复节点，则可以考虑克隆已有的元素，即使用<code>element.cloneNode()</code>替代<code>document.createElement()</code>。</p><h4 id="DOM元素集合的重复查询"><a href="#DOM元素集合的重复查询" class="headerlink" title="DOM元素集合的重复查询"></a>DOM元素集合的重复查询</h4><p>HTML集合是包含DOM节点引用的类数组对象，包括我们常用的<code>document.getElementByName()</code>，<code>document.images</code>等类似的方法所得到的元素集合。这些元素集合只是一个类似数组的列表，但同样提供了类似数组的<code>length</code>属性。</p><p>首先，在利用<code>document.getElementByName()</code>这类查询方法的时候，因为每次查询都会调用document，所以查询的速度回比较慢。但当因为需要多次获取元素集合的属性时，则会形成一个非常大的性能消耗。</p><p>另外，元素集合的<code>length</code>属性不同于数组的<code>length</code>属性，不仅当HTML文档发生更新的时候会自动更新，当调用它的时候也会重复查询，加上集合中的元素都是DOM对象，查询速度更慢，消耗更大。</p><p>解决的方案，重点放在减少对<code>document</code>的调用跟文档查询。当遇到需要重复调动<code>document.getElementByName()</code>这类查询方法，可以根据不同的情况，进行不同的优化。比如当需要重复查询同一个DOM节点时，可以考虑用局部变量去复制；当代码中多次需要调动document的方法时，也可以先把document复制到局部变量中(这个做法也有风险，当HTML文档结构发生改变时，局部变量是不会改变的)；当需要多次调用<code>length</code>属性时，同样先用局部变量存储下来，再执行其他操作。</p><h4 id="准确的获得DOM元素集合"><a href="#准确的获得DOM元素集合" class="headerlink" title="准确的获得DOM元素集合"></a>准确的获得DOM元素集合</h4><p>大多数情况下，我们都是需要获得一些准确的DOM元素集合进行操作，但是存在两类问题：有些方法得到的元素集合会比我们需要的要多(比如空的文本节点)，这个时候就会在处理集合是需要花时间去过滤筛选的；另外，获取DOM元素集合的调用太复杂。因此，有两类方法可以更准确的获取DOM元素集合：</p><ol><li>使用以下表格(书中给出的)左边的属性，替代右边的属性，可以更准确的获得DOM元素集合：</li></ol><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">被替代的属性</th></tr></thead><tbody><tr><td style="text-align:left">children</td><td style="text-align:left">childNodes</td></tr><tr><td style="text-align:left">ChildElementCount</td><td style="text-align:left">childNodes.length</td></tr><tr><td style="text-align:left">firstElementChild</td><td style="text-align:left">firstChild</td></tr><tr><td style="text-align:left">lastElementChild</td><td style="text-align:left">lastChild</td></tr><tr><td style="text-align:left">nextElementSibling</td><td style="text-align:left">nextSibling</td></tr><tr><td style="text-align:left">previousElementSibling</td><td style="text-align:left">previousSibling</td></tr></tbody></table><ol start="2"><li>使用<code>querySeletorALL()</code>方法跟<code>querySeletor()</code>方法。这两个方法可以免掉多次使用<code>getElementById()</code>跟<code>getElementByClass()</code>这类方法，通过CSS选择器一步到位。</li></ol><h3 id="重排-reflow-与重绘-repaint"><a href="#重排-reflow-与重绘-repaint" class="headerlink" title="重排(reflow)与重绘(repaint)"></a>重排(reflow)与重绘(repaint)</h3><p>简单的说，HTML文档跟CSS文件在首次加载时，得到DOM树跟渲染树，然后才会开始绘制。当DOM出现变化时，浏览器就需要重新计算元素的几何属性，并重新构造渲染树，这个过程叫重排(reflow)。浏览器也会重新绘制受影响的部分，这个过程叫重绘(repaint)。但有些情况下只会发生重绘，不需要重排。每次重排跟重绘都会导致页面的反应迟钝，使客户体验变差。所以我们要了解什么情况会触发重排跟重绘。</p><h4 id="触发重排的条件"><a href="#触发重排的条件" class="headerlink" title="触发重排的条件"></a>触发重排的条件</h4><p>这些情况下会发生重排：</p><ol><li>添加或删除可见的DOM元素</li><li>元素位置改变</li><li>元素尺寸改变(包括：外边距、内边距、边框厚度、宽度、高度等属性改变)</li><li>内容改变，例如：文本改变或图片被另一个不同尺寸的图片替代</li><li>页面渲染器初始化</li><li>浏览器窗口尺寸改变</li></ol><p>也有当滚动条出现时触发整个页面的重排。</p><h4 id="触发重绘的条件"><a href="#触发重绘的条件" class="headerlink" title="触发重绘的条件"></a>触发重绘的条件</h4><p>重绘只发生在当元素的可见的外观被改变，但并没有影响到布局的时候。比如背景颜色，字体颜色。</p><h4 id="渲染树渲染队列与刷新"><a href="#渲染树渲染队列与刷新" class="headerlink" title="渲染树渲染队列与刷新"></a>渲染树渲染队列与刷新</h4><p>大多数浏览器是通过队列来修改并批量执行重排过程，这样可以优化并降低消耗，但同时也会让程序在不知不觉中就触发了重排。以下获取布局信息的方法会导致列队刷新：</p><ol><li>offsetTop, offsetLeft, offsetWidth, offsetHeight</li><li>scrollTop, scrollLeft, scrollWidth, scrollHeight</li><li>clientTop, clientLeft, clientWidth, clientHeight</li><li>getComputedStyle() (currentStyle in IE)</li></ol><p>这些方法需要返回最新的布局信息，浏览器就会不得不执行渲染队列中待处理的变化并触发重排以返回正确的值。</p><h4 id="最小化重绘与重排"><a href="#最小化重绘与重排" class="headerlink" title="最小化重绘与重排"></a>最小化重绘与重排</h4><p>以下的几种方式可以减少重绘与重排的次数：</p><ol><li>改变样式。改变样式时，如果要对元素进行多个样式的修改，可以用<code>element.style.cssText</code>来一次处理，代替掉对每个样式单独的修改；</li><li>修改DOM。修改DOM时，有几个思路可以参考：可以把需要修改的DOM元素脱离文档流，再做修改，最后再放回文档中；可以把需要修改的DOM元素复制出来，修改完毕后直接替换到文档中；</li><li>减少使用会触发渲染队列刷新的方法；</li><li>让元素脱离动画流。当页面有带动画交互效果的元素时，最好在动画开始前把动画的元素做绝对定位，同时把其他元素先移到动画结束时的位置，再执行动画效果。这样可以减少动画过程中这个页面的大规模重排；</li><li>针对IE，减少大规模使用:hover。</li></ol><h3 id="通过DOM事件处理与用户的交互"><a href="#通过DOM事件处理与用户的交互" class="headerlink" title="通过DOM事件处理与用户的交互"></a>通过DOM事件处理与用户的交互</h3><p>现在很多页面都是存在大量的交互，而这些交互如果都要单独绑定事件处理器，则会应该性能。因此，书中提出建议使用事件代理，只需在外层元素绑定一个处理器，来处理所有子元素上触发的事件。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本章主要是针对DOM做优化，更多的是讨论如何减少DOM的调用修改。每种操作都可以根据不同的需求进行不同的实现以达到优化的目的。</p><p>文中用到的代码参考《高性能JavaScript》第三章。</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 高性能JavaScript </tag>
            
            <tag> 读书笔记 </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《高性能JavaScript》读书笔记(二)</title>
      <link href="/2018/06/18/High-Performance-JavaScript-Reading-Note-II/"/>
      <url>/2018/06/18/High-Performance-JavaScript-Reading-Note-II/</url>
      <content type="html"><![CDATA[<p>《高性能JavaScript》第二章数据存取，涉及很多优化点，需要花点时间吸收。下面就开始吧。</p><h3 id="数据存储不同方式之间的性能比较"><a href="#数据存储不同方式之间的性能比较" class="headerlink" title="数据存储不同方式之间的性能比较"></a>数据存储不同方式之间的性能比较</h3><p>第二章一开始就提到了数据存储的问题。js的数据存储分四类：字面量，本地变量，数组元素及对象成员。字面量跟本地变量在存取数据的性能消耗差不多，而数组元素跟对象成员消耗要大一些，但是也跟浏览器的优化有关。所以建议是尽量使用字面量和局部变量。</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>实际开发中，我们会根据项目需求使用各种变量跟方法。为了了解如何去优化代码的性能，就要了解作用域链。</p><p>关于作用域链，我在我的第一篇博文<a href="https://listentolife.cc/2018/04/23/scope/" target="_blank" rel="noopener">《JavaScript作用域》</a> 中有提到过，当时是用链表的形式对全部作用域跟函数作用域做了模拟。这里就不再赘述。</p><p>书中的图示（下图1.1）应该是更接近真实JavaScript作用域链的表现形式的，这里需要做一下说明。</p><p>图1 书中举例的add()的作用域链<br><img src="../images/high-performance-JavaScript-2-1.png" alt="图1 书中举例的add()的作用域链"></p><h4 id="什么叫作用域链"><a href="#什么叫作用域链" class="headerlink" title="什么叫作用域链"></a>什么叫作用域链</h4><p>书中给出的定义，作用域链是一个包含一个函数被创建的作用域中的对象集合，决定了哪些数据能被函数访问。作用域链在函数实例中是以一个内部属性<code>[[Scope]]</code>被储存的。当一个函数被创建时，它的作用域链会先被创建该函数的作用域中可访问的数据对象所填充。作用域链在创建时所填充的数据对象为全局对象。</p><p>在函数创建完成并开始执行时，会对执行的变量按照出现在函数中的顺序，被复制(中文是写复制，但是我有个问题，按照变量提升的规则，函数中的局部变量应该在这个时候进行声明，那是不是就不仅仅是复制全局中的变量，还有声明了的变量呢？)到“活动对象”的新对象中。这个对象会被推入作用域链的最前端。如</p><p>然后当函数执行完毕，执行环境被销毁，作用域链也会被销毁。如下图1.2</p><p>图2 书中举例函数add()执行期的作用域链<br><img src="../images/high-performance-JavaScript-2-2.png" alt="图2 书中举例函数add()执行期的作用域链"></p><h4 id="作用域链涉及的性能问题"><a href="#作用域链涉及的性能问题" class="headerlink" title="作用域链涉及的性能问题"></a>作用域链涉及的性能问题</h4><p>当函数在对变量操作时，每一次执行都会需要进行标识符的解析，而这就是性能优化的点。标识符(变量)的位置越深，它的读写速度就越慢。参考图1.1到图1.2的过程，在函数创建完毕，先创建“活动对象”时，如arguments是局部变量，则是直接声明，执行时不需要到全局对象中查找；而window则需要到最顶层的全局对象中查找。</p><p>所以我们的性能优化就在于，尽可能的使用局部变量。使用局部变量来赋值全局变量的值，执行的时候只要找局部变量的标识符即可完成查询的性能优化。</p><h4 id="with-amp-try-catch"><a href="#with-amp-try-catch" class="headerlink" title="with &amp; try-catch"></a>with &amp; try-catch</h4><p>with语句跟catch语句是书中提及的两个可以改变函数作用域链的语句。with语句可以创建一个新的变量对象，这个对象包含了参数指定的对象的所有属性。这个变量对象会推入作用域链的首位，即在活动对象的前面。这个语句使函数中可以避免多次书写参数，同时可以最优先访问参数的所有属性。问题在于函数的局部变量则降低了优先级，导致访问的代价变高了。</p><p>如果函数没有什么局部变量而都是操作某个对象的属性为主，那么使用with语句有可取之处，但是如果函数以操作局部变量为主，则建议不要使用with语句来影响查询性能。</p><p>同样的道理，catch语句有同样的问题。当try代码捕获错误是，代码的执行会直接跳转到catch语句，并把异常对象推入一个变量对象置于作用域的首位，同样的，catch代码块中，局部变量会降低优先级。</p><p>如果要降低查询性能的影响，最好的方案是将这个异常对象作为参数直接委托给一个函数进行处理，这样，在catch代码块内，不会出现局部变量，也不会出现由于作用域链的变化而导致的性能问题。</p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>闭包的特点我在写<a href="https://listentolife.cc/2018/04/23/scope/" target="_blank" rel="noopener">《JavaScript作用域》</a>的时候有提到，简单的说，就是可以在函数的外部调用内部的局部变量，并且闭包在执行完之后不会被马上销毁（换句话说，这个也是闭包的弊端：内存泄漏，内存开销）。</p><p>实际上，因为闭包会一直保持在内存中，所以其在执行时，闭包创建的活动对象会一直在作用域链的最顶层，而闭包所调用的变量一般是所在执行环境或者更顶层环境的全局变量。这样就出现了查询的性能影响。</p><p>如果要降低闭包对代码的性能影响，其一是要慎重的使用闭包，其二是在闭包中使用局部变量复制全局变量。</p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>因为JavaScript很多操作都是对对象的操作，所以对JavaScript对象的了解能对优化代码是有很大的帮助的。</p><h4 id="属性及方法"><a href="#属性及方法" class="headerlink" title="属性及方法"></a>属性及方法</h4><p>JavaScript对象包括了属性跟方法，区分的点在于对象的成员引用的是一个函数还是非函数类型。</p><h4 id="原型及原型链"><a href="#原型及原型链" class="headerlink" title="原型及原型链"></a>原型及原型链</h4><p>JavaScript中的对象是基于原型的。原型是所有对象的基础，它已经定义并实现了一个对象所必需包含的成员列表，而且原型对象是为所有对象实例所共享。</p><p>下图1.3及代码是书中举的一个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var book = &#123;</span><br><span class="line">title: &quot;High Performance JavaScript&quot;,</span><br><span class="line">publisher: &quot;Yahoo! Press&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">alter(book.toString()); // &quot;[object object]&quot;</span><br></pre></td></tr></table></figure><p>图3 书中实例book与原型的关系<br><img src="../images/high-performance-JavaScript-2-3.png" alt="图3 书中实例book与原型的关系"></p><p>图中可以看到，实例book虽然创建的时候只声明了两个实例成员，但是并没有定义<code>toString()</code>，然而<code>toString()</code>方法还是被正确执行了，是因为虽然实例book没有定义，但是book的原型对象已经定义了<code>toString()</code>方法。</p><p>当<code>book.toString()</code>被调用时，先会从实例成员开始搜索，如果实例成员中没有搜索到，则从原型成员搜索，如果能搜索到，则能成功执行，否则才会报错。</p><p>JavaScript有两个方案可以检测对象的成员，其中<code>in</code>操作符可以检测对象是否包含某个成员，不管这个成员是属于实例成员还是原型成员；而如果需要检测对象是否包含某个实例成员，则需要用<code>hasOwnProperty()</code>方法。</p><p>JavaScript有原型对象，开发者也可以根据项目的需求通过构造函数来创建另一种类型的原型。下图1.4及代码是书中举的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function Book(title, publisher)&#123;</span><br><span class="line">this.title = title;</span><br><span class="line">this.publisher = publisher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Book.prototype.sayTitle = function()&#123;</span><br><span class="line">alert(this.title);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var book1 = new Book(&quot;High Performance JavaScript&quot;, &quot;Yahoo! Press&quot;);</span><br><span class="line">var book2 = new Book(&quot;JavaScipt: The Good Parts&quot;, &quot;Yahoo! Press&quot;);</span><br><span class="line"></span><br><span class="line">alert(book1 instanceof Book);   // true</span><br><span class="line">alert(book1 instanceof Object); // true</span><br><span class="line"></span><br><span class="line">book1.sayTitle();  //&quot;High Performance JavaScript&quot;</span><br><span class="line">alert(book1.toString()); // &quot;[object object]&quot;</span><br></pre></td></tr></table></figure><p>图4 书中列举的原型链<br><img src="../images/high-performance-JavaScript-2-4.png" alt="图4 书中列举的原型链"></p><p>代码中，先是定义了一个 构造函数<code>Book</code>，然后在通过<code>Book</code>来创建实例<code>book1</code>跟<code>book2</code>。其中，<code>book1</code>跟<code>book2</code>的成员<code>title</code>跟<code>publisher</code>都是各自的成员，拥有不同的值，而两个实例的原型<code>__proto__</code>都是指向<code>Book.prototype</code>，而<code>Book.prototype</code>的<code>__proto__</code>又指向原型对象object。整个就是原型链。两个实例共享着一个原型链。</p><p>从对原型链的认识，我们可以看到，当执行实例对象的成员时，明显的，成员的位置越深，搜索并访问的时间越长。</p><h4 id="嵌套成员"><a href="#嵌套成员" class="headerlink" title="嵌套成员"></a>嵌套成员</h4><p>简单的说，对象的成员本身可能就是一个对象，所以会包含有自己的成员，也就是嵌套成员。这种结构会导致访问嵌套成员是，需要从最底层对象的成员开始搜索，而且成员的嵌套得越深，搜索读取的速度就越慢。</p><p>因此，优化的方案，主要是在调用对象成员及嵌套成员时，可以把需要多次读取的对象成员复制到局部变量中进行使用。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本章涉及都是JavaScript的一些数据处理。虽然每种数据存储的方式都有访问速度的快慢区别，但是并不代表开发中就应该避免使用访问速度慢的数据存储方式，二是应该根据项目要求进行慎重的使用。而最常见的优化方案仍然是利用局部变量来复制搜索访问比较慢但又需要经常调用的数据。</p><p>文中用到的图片跟代码参考《高性能JavaScript》第二章。</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 高性能JavaScript </tag>
            
            <tag> 读书笔记 </tag>
            
            <tag> 作用域 </tag>
            
            <tag> 原型链 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《高性能JavaScript》读书笔记(一)</title>
      <link href="/2018/06/10/High-Performance-JavaScript-Reading-Note-I/"/>
      <url>/2018/06/10/High-Performance-JavaScript-Reading-Note-I/</url>
      <content type="html"><![CDATA[<p>《高性能JavaScript》这本书很多人推荐，我对这本书的印象也是值得学习前端的童鞋的细读吸收。作为学习者，同样也是要认真的学习这本书中为我们总结的一些开发中的经验，能提高我们开发代码的效率。</p><p>第一章主要针对JavaScript的加载跟执行的优化。总结一下就是推迟加载JavaScript代码，减少JavaScript文件加载数量及异步加载JavaScript代码。</p><h3 id="优化加载JavaScript代码的原因"><a href="#优化加载JavaScript代码的原因" class="headerlink" title="优化加载JavaScript代码的原因"></a>优化加载JavaScript代码的原因</h3><p>一般我们在入门前端初期，都会学到，<code>&lt;head&gt;</code>标签中可以放<code>&lt;script&gt;</code>标签，用来引入js文件或js代码。然后大部分人都会习惯性的把js代码从<code>&lt;head&gt;</code>标签引入。</p><p>操作上是正确的，确实可以完成js代码的引入，但是由于js代码具有阻塞的特性，会影响页面的解析与加载时间。一般页面的加载，首先会HTML代码的<code>&lt;head&gt;</code>标签开始。当代码执行到<code>&lt;head&gt;</code>标签的<code>&lt;script&gt;</code>标签时，由于浏览器无法判断<code>&lt;script&gt;</code>标签中的代码是否会影响DOM节点，所以会暂停页面的加载，而优先执行<code>&lt;script&gt;</code>标签中的代码。</p><p>如果<code>&lt;script&gt;</code>标签的代码是直接出现在标签中，则直接执行；而如果是通过引入的方式，则还需要下载之后再执行。一旦下载的文件较大，加上加载的时间，那将让网页的客户体验很糟糕。</p><p>于是，就有了优化加载JavaScript代码的必要。从上面我们可以看到，一般可以优化的方案，就是把下载JavaScript文件的时间推迟，或者把执行JavaScript代码的时间推迟。下面我们就来总结一下优化的方案</p><h3 id="加载JavaScript代码优化的方案"><a href="#加载JavaScript代码优化的方案" class="headerlink" title="加载JavaScript代码优化的方案"></a>加载JavaScript代码优化的方案</h3><h4 id="阻塞问题的优化"><a href="#阻塞问题的优化" class="headerlink" title="阻塞问题的优化"></a>阻塞问题的优化</h4><p>之所以会阻塞，就是因为JavaScript代码早于html的DOM代码执行了，再进一步说，因为JavaScript代码在<code>&lt;head&gt;</code>标签中，比<code>&lt;body&gt;</code>标签更早被获取，所以才会有阻塞的问题。因此，可以考虑让JavaScript代码被滞后获取。</p><p>最简单的想法就是把 <strong><code>&lt;script&gt;</code>标签放到<code>&lt;body&gt;</code>标签底部</strong> ，这样可以减少对页面渲染的阻塞。这个也是目前开发中比较常见的一种优化方案。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Example&lt;/title&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; herf=&quot;style.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;Hello World&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;file1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>同样也要一种类似的方案，就是通过给 <strong><code>&lt;body&gt;</code>标签创建<code>&lt;script&gt;</code>标签，再引入js文件</strong> 的方案。这个方案看起来比上面的方案复杂了，但是在需要引入多个js文件的情况下，还是比较好的方案。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var script = document.createElement(&quot;srcipt&quot;);</span><br><span class="line">script.type = &quot;text/javascript&quot;;</span><br><span class="line">script.src = &quot;file1.js&quot;;</span><br><span class="line">document.getElementsByTagName(&quot;head&quot;)[0].appendChild(script);</span><br></pre></td></tr></table></figure><p>另一种方案则是采用了 <strong>XMLHTTPRequest脚本注入</strong> ，先创建一个XHR对象，然后用这个对象下载js文件，然后再通过创建<code>&lt;script&gt;</code>元素把js代码引入到页面中。</p><p>这种方案的优点就是可以下载JavaScript代码但不会立即执行，而且所有主流浏览器都能正常工作。但是也会有一个问题，就是因为涉及异步请求文件，所以需要遵循同域。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.open(&quot;get&quot;, &quot;file1.js&quot;, &quot;true);</span><br><span class="line">xhr.noreadystatechange = function () &#123;</span><br><span class="line">if (xhr.readyState == 4) &#123;</span><br><span class="line">if (xhr.status &gt;= 200 &amp; xhr.status &lt; 300 || xhr.status == 304) &#123;</span><br><span class="line">var script = document.createElement(&quot;script&quot;);</span><br><span class="line">script.type = &quot;text/javascript&quot;;</span><br><span class="line">script.src = xhr.responseText;</span><br><span class="line">document.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send(null);</span><br></pre></td></tr></table></figure><p>在《高性能JavaScript》的后面《推荐的无阻塞模式》一节中也是对这个方案做了封装，使这个方案适合添加大良的JavaScript代码。</p><h4 id="加载JavaScript的优化"><a href="#加载JavaScript的优化" class="headerlink" title="加载JavaScript的优化"></a>加载JavaScript的优化</h4><p>一般一个项目加载JavaScript文件都会有好几个文件（特别是强调模块化工程化的前端开发），如果遇到一个HTML页面需要加载多个js文件，则每个js文件都会需要单独的下载跟执行，会影响页面的总体性能。因此，书中提及了雅虎提供的合并处理器，可以用一个URL包含多个文件，从而使URL上的文件可以同时加载。<br>不过，从现在前端开发的做法上来看，虽然开发上强调模块化，但是实际已经把开发跟上线分离，实际上线的项目中，已经通过打包工具减少了文件（一般可以看到打包的js文件就剩一个bound.js了），所以书中的这个方案可以说已经通过工程化得到更好更广泛的解决了。</p><h4 id="执行JavaScript的优化"><a href="#执行JavaScript的优化" class="headerlink" title="执行JavaScript的优化"></a>执行JavaScript的优化</h4><p>书中也提及如何延迟js代码的执行。HTML 4为<code>&lt;script&gt;</code>标签定义了一个扩展属性：defer，这个属性主要是表明当前元素的脚本不影响DOM，所以浏览器会在页面加载完成后在执行<code>&lt;script&gt;</code>标签中的脚本。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>书中还提及几个库，都是针对无阻塞脚本加载开发的，这里就没在深入了解了。</p><p>总结一下，优化JavaScript代码的加载跟执行对页面的客户体验会有很大的提升。从当前前端开发来看，更多的方案是把多个js文件打包成少量的js文件，然后把<code>&lt;script&gt;</code>标签放到<code>&lt;body&gt;</code>标签底部。书中也提及了一些其他的方案，这些方案也可以在一些小项目中使用，一样能提升页面性能。</p><p>上面使用的代码示例都是书中的代码示例。</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 高性能JavaScript </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/04/24/hello-world/"/>
      <url>/2018/04/24/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>JavaScript 作用域</title>
      <link href="/2018/04/23/scope/"/>
      <url>/2018/04/23/scope/</url>
      <content type="html"><![CDATA[<p>本篇是我搭建博客的第一篇，其实之前我在自己的微信号已经有写过一些小文章，后面会慢慢的移到这边来。这里废话不多说吧。JavaScript的作用域是一个很关键也很常见的技术点，很关键是因为所有编程语言都有一套作用域的规则，理解所使用的编程语言的作用域可以在开发时少走点弯路，不会踩到奇奇怪怪的坑，很常见是因为作用域存在整个开发项目的任何地方，避不开。再者说面试官也很喜欢考这个问题呢。</p><p>刚好我看了《你不知道的JavaScript(上)》，对作用域有了一些更深入的了解，所以就想整理一下，对作用域的认识做一个详细的介绍。</p><h2 id="一般对js作用域的了解"><a href="#一般对js作用域的了解" class="headerlink" title="一般对js作用域的了解"></a>一般对js作用域的了解</h2><h3 id="怎么理解作用域"><a href="#怎么理解作用域" class="headerlink" title="怎么理解作用域"></a>怎么理解作用域</h3><p>首先，我要说明一下，现在讨论的JavaScript作用域指的是ES5的作用域。在ES5中，只有全局作用域跟函数作用域，没有块作用域，这个会放到<strong>ES6的作用域</strong>一节中做介绍。</p><p>代码1.1：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var i = 10;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">a</span></span>() &#123;</span><br><span class="line">  alert(i);</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure></p><p>代码1.2：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var i = 10;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">a</span></span>() &#123;</span><br><span class="line">  alert(i);</span><br><span class="line">  var i = 5;</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure></p><p>代码1.1跟1.2最终输出是不同的。这个就跟作用域有关。</p><p>代码1.1中，在全局声明变量i并赋值10，然后声明了一个函数a()。函数a()中调用了全局变量i，所以alert的结果是<code>10</code>。这个没有什么异议。一般不明白的是代码1.2。</p><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>代码1.2的最终输出为<code>undefined</code>，原因是虽然函数a()中是在<code>alert(i)</code>之后才声明函数中的局部变量i并赋值5，但实际上JavaScript在处理函数a()代码时是先把<code>var i = undefined</code>提前到函数执行其他代码前声明了。也就是说，JavaScript代码在执行时，会在每个作用域内，优先把声明变量，函数的代码提前执行(预处理)，然后在执行其他代码(逐行解读)。这就是变量提升。</p><p>变量提升中，函数的声明是怎么处理的？其实这个问题还得分两种情况：如果函数的声明是写成<code>var a = function () {}</code>，则a是一个变量，在预处理中，只会声明<code>var a = undefined</code>，在后面的逐行解读中，就有可能出现a未定义的情况；如果函数声明是写成<code>function a() {}</code>，则a()是一个函数，在预处理中，会把整个函数进行预处理，当逐行解读，解读到a()时，就会正常执行函数。</p><p>当然，千万不要理解成代码1.2中a()在执行时把<code>var i = 5</code>提前了。变量提升只是提升了变量声明。对于为什么只提前执行了变量声明，我们留一个悬念。</p><blockquote><p><strong>注意：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 如果是在函数（局部作用域）中，出现了如下的情况：</span><br><span class="line">alert(n);</span><br><span class="line">function f1() &#123;</span><br><span class="line">  n = 999;</span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br><span class="line">// 虽然n会变成全局变量，但是alert(n)在这个位置会报错，具体原因也会在后面做解释。</span><br><span class="line">// 一般应该防止变量n这种情况出现</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>代码1.1其实本身也涉及另外一个内容，就是作用域链。简单的说，全局作用域在执行到a()时，会先创建a()的作用域，然后将该作用域放在链表的头部，然后把指针指向全局作用域。当执行到<code>alert(i)</code>时，先会在当前作用域内查找已声明的变量，看是否存在变量i，存在则直接使用，不存在则根据作用域链向上一级父级作用域查找，直到顶级作用域window（网页在浏览器运行，实际是在浏览器这个全局作用域下运行，所以window是网页作用域链的最高作用域）。</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包是个很有趣的概念，它有一些特点。我们先举个例子：</p><p>代码1.3：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var foo = function()&#123;</span><br><span class="line">  var i = 0;</span><br><span class="line">  return function inner()&#123;</span><br><span class="line">    i++;</span><br><span class="line">     console.log(i);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">var bar = foo();</span><br><span class="line">bar();</span><br></pre></td></tr></table></figure></p><p>首先，在代码1.3中，先声明了变量foo并引用一个函数，然后函数内部返回函数inner()。inner()调用了foo()中的i。然后在全局作用域声明了bar并引用了foo()，实际最终是得到了函数inner()的引用。这里可以发现一个问题，就是正常来说，在一个作用域链上，父作用域是调用不了子作用域的变量，但是反之可以。但是这里的全局变量bar()执行之后却得到了foo()中的局部变量i的值，实现了在作用域外变量的调用。</p><p>其次，如果再执行一次<code>bar()</code>，会得到2的结果。这个结果表明，当全局变量得到了函数inner()的引用之后，函数inner()会一直保持在内存中，而其依赖的foo()，也因此一直保持在内存中，并没有在调用结束后备垃圾回收机制回收。</p><p>闭包的这些有趣的特点让我想起了克莱因瓶(脑洞有点大，这两个事物确实有点类似)。那为什么会出现这么有趣的闭包呢？下面，我们就带上上面的这些问题，一起来再深入一步了解一下js的作用域吧。</p><h2 id="深入了解js作用域"><a href="#深入了解js作用域" class="headerlink" title="深入了解js作用域"></a>深入了解js作用域</h2><p>想要再深入的了解js作用域，就应该了解js是怎么执行的。简单的说，我们把js代码的执行分成三部分：引擎，编译，作用域。</p><p>引擎，这里简单来说就是负责整个js代码的编译跟执行工作。这个工作又分为两部分，一部分是编译，编译程序员编写的代码字符串，另一部分是执行，执行编译后得到的机器指令，这里涉及了作用域。</p><h3 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h3><p>首先，一般编程语言的编译经历了三个步骤：分词/词法分析(Tokenizing/Lexing)，解析/语法分析(Parsing)及代码生成。js的编译也差不多。</p><h4 id="分词-词法分析-Tokenizing-Lexing"><a href="#分词-词法分析-Tokenizing-Lexing" class="headerlink" title="分词/词法分析(Tokenizing/Lexing)"></a>分词/词法分析(Tokenizing/Lexing)</h4><p>我们平时写的代码，其实对于机器来说是一段字符串。于是，机器就得先把代码做一次拆解，把每一个独立的，有意义的代码块(词法单元)分解出来。比如说，<code>var n;</code>，会被拆解成<code>var</code>，<code>n</code>，<code>;</code>。</p><h4 id="解析-语法分析-Parsing"><a href="#解析-语法分析-Parsing" class="headerlink" title="解析/语法分析(Parsing)"></a>解析/语法分析(Parsing)</h4><p>当完成词法分析之后，就要开始做语法分析了。原本一个个词法单元就需要拼接成一个具有程序语法的结构。那什么结构可以达到这样的效果呢？这个结构我们都应该会想到的吧，就是树，叫抽象语法树(Abstract Syntax Tree, AST)。比如上面的<code>var n;</code>，在拆解成<code>var</code>，<code>n</code>，<code>;</code>之后，就可以开始语法分析。那分析的结果就会解析成一个顶级节点(VariableDeclaration)下，有一个节点(AssignmentExpression)的值为<code>n</code>，这个节点下有一个节点(NumericLiteral)的值为<code>undefined</code>(因为这个代码只是声明了一个变量，所以这里就假定值为undefined)。</p><h4 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h4><p>在生成AST之后，就要把它转换为可执行的代码，这个过程叫做代码生成。比如说，上例中<code>var n;</code>的AST转换后，将变成机器指令，创建变量n。</p><p>JavaScript的编译过程在某些步骤上要复杂一些，但是其编译过程也是大同小异。为了后面比较容易理解作用域，我们可以暂时先这么理解。</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>重点来了，机器指令生成之后，作用域是要干嘛呢？其实，作用域就是要把这些机器指令中涉及的标识符，按一套严格的规则，进行分类维护形成一系列查询，确认机器指令对他们的访问权限。</p><p>怎么理解作用域呢？我这里做一个假设，方便理解。</p><p>作用域是要能把变量跟函数划分作用范围的，比如全局作用域中的变量可以在全局调用，计算跟赋值，函数可以被掉用，而局部作用域中的变量只能在当前作用域及下级作用域中调用计算等等，函数亦是如此，比如：</p><p>代码2.1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var i = 10;</span><br><span class="line">var x = 5;</span><br><span class="line">function test () &#123;</span><br><span class="line">  var x = i;</span><br><span class="line">  console.log(x);</span><br><span class="line">&#125;</span><br><span class="line">console.log(x);</span><br><span class="line">test();</span><br></pre></td></tr></table></figure></p><p>上例中，在完成代码的编译后，会先扫描出全局作用域所有的变量声明跟函数声明(函数表达式其实只会提升变量声明部分)形成这样一个作用域：</p><p><strong>代码2.1全局作用域(parentScope)</strong>:</p><table><thead><tr><th style="text-align:left">变量/方法</th><th style="text-align:left">地址</th><th style="text-align:left">值</th></tr></thead><tbody><tr><td style="text-align:left">i</td><td style="text-align:left">地址1</td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">x</td><td style="text-align:left">地址2</td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">test()</td><td style="text-align:left">地址3</td><td style="text-align:left">{…}</td></tr></tbody></table><p>当执行到<code>test();</code>时，又会扫描test函数的函数作用域：</p><p><strong>test函数作用域</strong>：</p><table><thead><tr><th style="text-align:left">变量/方法/上级作用域</th><th style="text-align:left">地址</th><th style="text-align:left">值</th></tr></thead><tbody><tr><td style="text-align:left">x</td><td style="text-align:left">地址4</td><td style="text-align:left">undefined</td></tr><tr><td style="text-align:left">parentScope</td><td style="text-align:left">地址0</td><td style="text-align:left">—</td></tr></tbody></table><p>这里我把作用域模拟成以链表的形式，方便理解。</p><p>然后，开始执行机器指令。</p><h3 id="变量的查找"><a href="#变量的查找" class="headerlink" title="变量的查找"></a>变量的查找</h3><p>如当执行到<code>x = 5</code>的指令时，引擎会去找当前作用域，即全局作用域进行变量查询，查询是否存在变量x(准确的说法是引擎为变量x进行LHS查询)。由于我把作用域理解成链表了，所以查询的模拟就是对链表上当前结点的查询。当查询到变量x已存在，就会返回其内存地址，然后进行赋值。</p><p>如执行到<code>x = i</code>的指令时，引擎同样会去当前作用域，即test函数作用域进行LHS查询，返回内存地址。这里就出现了函数作用域中的变量x对全局作用域中的变量x的遮蔽。然后引擎再对i进行查询（引擎为变量i进行RHS查询）。先是从当前作用域开始查询，结果没有找到，因此拿到全局作用域parentScope的地址，找到全局作用域，继续查询找到之后，得到储存的值，然后再做赋值。</p><h3 id="其他概念的理解"><a href="#其他概念的理解" class="headerlink" title="其他概念的理解"></a>其他概念的理解</h3><p>上面的代码从编译到机器指令执行的模拟，还可以对一些概念的做一些理解：变量提升，其实是代码执行运算前的解析，并形成作用域；变量的遮蔽，其实是作用域权限的效果；作用域链，其实是变量查询的规则导致的。当然，还有一些更深的内容，比如上面简单提及的LHS查询，得到的是变量容器(我的理解就是得到变量的内存地址)，RHS查询，得到的是储存的值(并不需要得到变量的内存地址，因为只是做赋值，当然不同的数据类型返回的值也可能是内存地址，比如数组)。</p><p>这里也可以对闭包有了更深入的理解：闭包的操作上，是把一个局部作用域赋值给一个全局变量，使这个局部作用域中的变量可以以一种特殊的方式在全局作用域中获得。但因为这个局部作用域被保留在一个全局变量中，所以它也将无法再调用结束后被回收，并一直保持原有的变量跟值。</p><h2 id="ES6的作用域"><a href="#ES6的作用域" class="headerlink" title="ES6的作用域"></a>ES6的作用域</h2><p>这里之所以要提到ES6的作用域，是因为ES6已经是前端工程师必需学习的内容了，再者ES6的作用域确实跟我们所知道的JavaScript(ES5)的作用域有所不同。这里就做一些介绍。</p><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>估计很多人都知道ES6 let的存在了，这里就只是对一些点做介绍，给后面ES6的作用域做铺垫。</p><p>首先，<strong>let所声明的变量只在所在的代码块内有效</strong>。这个就跟var有比较大的区别了，比如下面的代码：</p><p>代码3.1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  var a = 5;</span><br><span class="line">  let b = 10;</span><br><span class="line">&#125;</span><br><span class="line">console.log(a);  // 5</span><br><span class="line">console.log(b);  // ReferenceError: b is not defined</span><br></pre></td></tr></table></figure></p><p>上面的代码就可以看出，在{}内用let声明的b在全局作用域上无法调用，直接报错了。</p><p>代码3.2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  console.log(a);  // undefined</span><br><span class="line">  console.log(b);  // ReferenceError: b is not defined</span><br><span class="line">  var a = 5;</span><br><span class="line">  let b = 10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>把代码3.1修改成代码3.2，运行的结果也很明显了：<strong>let也不支持变量提升</strong>。let声明的变量必须在声明后使用(包括赋值，运算等)，否则会报错。</p><p>代码3.3：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var b = 15;</span><br><span class="line">var c = 20;</span><br><span class="line">&#123;</span><br><span class="line">  console.log(a);  // undefined</span><br><span class="line">  console.log(c);  // 20</span><br><span class="line">  console.log(b);  // ReferenceError: b is not defined</span><br><span class="line">  var a = 5;</span><br><span class="line">  let b = 10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再改成改成代码3.3，运行的结果就可以得到另一个结论：存在let声明的区域不受外部的影响，被锁区了，叫<strong>暂时性死区</strong>。</p><p>当然，还有一个特性，就是<strong>let声明的变量不可以重复声明</strong>，这个大家就自己去尝试了。</p><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>const很多特性跟let一样，比如上面提及let的四个特性也是const的特性。但const跟let有一个比较大的区别，就是const声明的是常量，这个常量只能被读取，不能二次修改写入。而且必须要在声明的同时进行赋值。</p><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>上面的let跟const其实都是铺垫，最终还是要回归到作用域这个话题上来。ES6跟ES5在作用域上最大的不同就是支持块级作用域，而let跟const就是块级作用域的坚强后盾。</p><p>从我的理解看来，<strong>暂时性死区</strong>其实就是让全局作用域跟函数作用域中的某一块代码变成相对独立的块级作用域，这个块级作用域的形成需要有let或const的声明作为标志。</p><p>块级作用域的特点从let跟const的四个特性可见一斑。外部作用域无法获得块级作用域内let变量跟const常量，块级作用域内部let声明的变量也不会覆盖外部作用域声明的变量。这样就可以防止像for循环中i变量的全局污染。</p><p>还有一个特点可以自己去尝试一下的，<strong>函数本身的作用域在其所在的块级作用域之内</strong>。这是一个需要注意的知识点。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>关于JavaScript的作用域写了很多，上述一些内容，有来自《你不知道的JavaScript(上)》前面几章，也有来自阮一峰老师的《ES6标准入门(第二版)》相关的章节(目前已经出了第三版了)，掺杂着一些个人的理解跟学习心得。我相信对作用域有这样深一层的理解，会对相关的问题有更准确的判断。</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 作用域 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
